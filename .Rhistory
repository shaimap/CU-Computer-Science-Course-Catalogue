df <- data.frame(Strengths = strengths, Weight = weight, stringsAsFactors = FALSE)
return (df)
}
# top_strengths1 and top_strengths2 are both vectors of top 5 strengths of 2 different individuals
# this function scores the difference in the individuals based on their strengths
dissimilarity_index <- function(top_strengths1, top_strengths2){
n1 <- construct_comparision_df(top_strengths1)
n2 <- construct_comparision_df(top_strengths2)
sum = 0
for(i in 1:length(strengths)){
abs_diff <- abs(n1$Weight[i] - n2$Weight[i])
sum <- sum + abs_diff
}
return (sum/2)
}
# given a list of top strengths and their corresponding ids, we construct the edges between all of the top_strengths using their ids.
# edges exist between any two top strength ids which have a corresponding dissimilary score > .5
create_edges <- function(top_strengths_list, ids, diss_ind){
edges <- c("to", "from", "weight")
for(i in 1:(length(top_strengths_list)-1)){
top_strengths1 <- top_strengths_list[[i]]
for(j in (i+1):length(top_strengths_list)){
top_strengths2 <- top_strengths_list[[j]]
score <- dissimilarity_index(top_strengths1, top_strengths2)
if(score >= diss_ind){
edges <- rbind(edges, c(ids[i],ids[j], as.numeric(score)))
}
}
}
edges <- data.frame(edges, stringsAsFactors = FALSE)
edges <- edges[-c(1),]
names(edges) <- c("to", "from", "weight")
edges <- setattr(edges, "row.names", 1:nrow(edges))
return (edges)
}
# constructs a graph object given top strengths_list and their corresponding ids
graph_object <- function(top_strengths_list, ids, diss_ind){
nodes <- ids
edges <- create_edges(top_strengths_list,ids, diss_ind)
g <- graph_from_data_frame(d = edges, vertices = nodes, directed = FALSE)
g <- set_edge_attr(g, name = "weight", value = as.numeric(edges$weight))
g <- set_edge_attr(g, name = "edge_id", value = 1:nrow(edges))
return (g)
}
# convert categories to list
generate_top_strengths_list <- function(categories){
strengths <- categories %>% select("Strength 1", "Strength 2", "Strength 3", "Strength 4", "Strength 5")
for(i in 1:nrow(strengths)){
top_strengths_list[[i]] <- as.character(strengths[i,])
}
return (top_strengths_list)
}
# visualizes individuals in the top strengths list that are totally dissimilar i.e. have
# a dissimilarity index of 1.
vis_dissimilarity <- function(categories){
top_strengths_list <- generate_top_strengths_list(categories)
ids <- categories$ID
g <- graph_object(top_strengths_list, ids, 1)
edges <- data.frame(as_edgelist(g))
nodes_vis <- data.frame(id = V(g)$name)
edges_vis <- data.frame(to = edges$X1,
from = edges$X2,
width = rep(1, nrow(edges)),
stringsAsFactors = FALSE)
vis <- visNetwork(nodes_vis,
edges_vis,
height = "750px",
width = "750px",
background = "black")  %>%
visEdges(color= list(opacity = .4))  %>%
visIgraphLayout("layout_with_lgl") %>%
visNodes(size = 25,
font = list(face = 'Pt Sans', color = "white", bold = TRUE, size = 20)) %>%
visOptions(highlightNearest = list( enabled = TRUE, degree = 1, algorithm = "hierarchical"),
selectedBy = "label") %>%
visPhysics(hierarchicalRepulsion = list(nodeDistance = 150)) %>%
visInteraction(navigationButtons = TRUE)
return (vis)
}
# constructs edges with a certain weight equivalent to number of times strengths occur together in all lists
# nodes are indicated by id
create_edges_cooccuring <- function(categories){
top_strengths_df <- categories %>% select(`Strength 1`,
`Strength 2`,
`Strength 3`,
`Strength 4`,
`Strength 5`)
edges <- c("to", "from", "weight")
to <- c()
from <- c()
weight <- c()
for(i in 1:length(strengths)){
strength <- strengths[i]
rows <- top_strengths_df %>% filter(`Strength 1` == strength |
`Strength 2` == strength |
`Strength 3` == strength |
`Strength 4` == strength |
`Strength 5` == strength)
cooccuring_strengths <- as.vector(t(rows))
cooccuring_strengths <- cooccuring_strengths[cooccuring_strengths != strength]
cooccuring_strengths_unique <- cooccuring_strengths %>% unique()
cooccuring_strengths_unique <- cooccuring_strengths_unique
for(i in 1:length(cooccuring_strengths_unique)){
x <- cooccuring_strengths_unique[i]
n <- length(cooccuring_strengths[cooccuring_strengths == x])
if((x %in% to) & (strength %in% from)){
to <- to
from <- from
weight <- weight
}
else{
to <- c(to, strength)
from <- c(from, x)
weight<- c(weight, n)
}
}
}
weight_ratio <- weight/max(weight)
edges <- data.frame(to = to, from = from, weight = weight, weight_ratio = weight_ratio, stringsAsFactors = FALSE)
return (edges)
}
# constructs visualization of cooccuring strengths
# Strengths with same category are colorcoded
# edges are weighted by number of coocurrences between 2 nodes (strengths) and have tooltips indicating number of coocurrences
# nodes are labelled as strengths
vis_cooccurring_categories <- function(categories){
nodes <- data.frame(id = strengths,
label = strengths,
title = paste("<br>Strength Type:",
strengths,
"</br><br>Category Type:",
strengths_categories$category_type),
group = strengths_categories$category_type,
stringsAsFactors = FALSE)
edges <- create_edges_cooccuring(categories)
edges<-cbind(edges, title = paste("Number of Cooccurrences:",edges$weight))
edges_vis <- edges %>% select(to, from, title)
edges_vis$width <- edges$weight_ratio
vis <- visNetwork(nodes,
edges_vis,
background = "black")  %>%
visIgraphLayout("layout_with_lgl") %>%
visNodes(size = 25, font = list(face = 'Pt Sans', color = "white", bold = TRUE, size = 20)) %>%
visOptions(highlightNearest = list( enabled = TRUE, algorithm = "hierarchical"),
selectedBy = "label") %>%
visInteraction(navigationButtons = TRUE)
return (vis)
}
#sankey nodes
create_nodes_sankey <- function(categories){
relevant_columns <- categories %>% select(`Strength 1`,
`Strength 2`,
`Strength 3`,
`Strength 4`,
`Strength 5`)
for(i in 1:ncol(relevant_columns)){
relevant_columns[,i] <- paste(as.character(relevant_columns[,i]), i)
}
nodes <- as.character(cbind(relevant_columns[,1],
relevant_columns[,2],
relevant_columns[,3],
relevant_columns[,4],
relevant_columns[,5])) %>% unique
return (nodes)
}
#sankey edges
create_edges_sankey <- function(categories){
relevant_columns <- categories %>% select(`Strength 1`,
`Strength 2`,
`Strength 3`,
`Strength 4`,
`Strength 5`)
for(i in 1:ncol(relevant_columns)){
relevant_columns[,i] <- paste(as.character(relevant_columns[,i]), i)
}
nodes <- as.character(cbind(relevant_columns[,1],
relevant_columns[,2],
relevant_columns[,3],
relevant_columns[,4],
relevant_columns[,5])) %>% unique
source <- c()
target <- c()
for(i in 1:(nrow(relevant_columns))){
for(j in 1:(ncol(relevant_columns)-1)){
source_name <- relevant_columns[i,j]
target_name <- relevant_columns[i,j+1]
source <- c(source,which(source_name==nodes)-1)
target <- c(target,which(target_name==nodes)-1)
}
}
edges_raw <- data.frame(source = as.numeric(source),target = as.numeric(target))
edges_unique <- edges_raw %>% unique()
value <- apply(edges_unique, 1, function(x){
n <- nrow(edges_raw %>% filter(edges_raw$source ==x[1] & edges_raw$target == x[2]))
return (n)
})
edges_unique$value <- value
return (edges_unique)
}
# sankey diagram showing flow of top 5 strengths (i actually am unsure of how useful this would be tbh but its here)
vis_sankey <- function(categories){
nodes <- create_nodes_sankey(categories)
edges <- create_edges_sankey(categories)
plot_ly(
type = "sankey",
domain = list(
x =  c(0,1),
y =  c(0,1)
),
orientation = "h",
valueformat = ".0f",
valuesuffix = "TWh",
node = list(
label = nodes,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = edges$source,
target = edges$target,
value = edges$value,
label = edges$value
)
) %>%
layout(
title = "Flow of Top 5 Strengths from Greatest to Least",
font = list(
size = 10
),
xaxis = list(showgrid = F, zeroline = F),
yaxis = list(showgrid = F, zeroline = F)
)
}
# shows dissimilarity between strengths lists that have a dissimilarity index of 1 (are completely dissimilar)
vis1 <- vis_dissimilarity(categories)
# constructs visualization of cooccuring strengths
# Strengths with same category are colorcoded
# edges are weighted by number of coocurrences between 2 nodes (strengths) and have tooltips indicating number of coocurrences
# nodes are labelled as strengths
vis2 <- vis_cooccurring_categories(categories)
# sankey diagram showing flow of top 5 strengths from one to the other
#(i actually am unsure of how useful this would be tbh but its here)
vis3 <- vis_sankey(categories)
html_code <- read_html(url)
url <- "http://www.cureviews.org/course/CS/4780"
library(rvest)
url <- "http://www.cureviews.org/course/CS/4780"
html_code <- read_html(url)
rating <- html_code %>% html_node('#gaugeHolder > div:nth-child(1) > svg > text:nth-child(5)') %>% html_text()
rating
rating <- html_code %>% html_node('#gaugeHolder > div:nth-child(1) > svg > text:nth-child(5)') %>% html_text()
rating
rating <- html_code %>% html_node('#gaugeHolder > div:nth-child(1) > svg') %>% html_text()
rating
rating <- html_code %>% html_node('<div id="text">5</div>') %>% html_text()
rating <- html_code %>% html_node('#coursedetails > div.panel.panel-default > div') %>% html_text()
rating
rating <- html_code %>% html_node('#gaugeHolder') %>% html_text()
rating
rating <- html_code %>% html_node('#gaugeHolder > div:nth-child(1) > svg > text:nth-child(5)') %>% html_text()
rating
rating <- html_code %>% html_node('#gaugeHolder > div:nth-child(1)') %>% html_text()
rating
rating <- html_code %>% html_node('text') %>% html_text()
rating
rating <- html_code %>% html_node('svg') %>% html_text()
rating
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
install.packages("shinydashboardplus")
install.packages("shinydashboardPlus")
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
coreq <- course_row$coreq
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
rating <- html_code %>% html_node('<text x="80" y="87.27272727272727" text-anchor="middle" style="text-anchor: middle; fill: rgb(83, 178, 119); stroke: none; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; line-height: normal; fill-opacity: 1; font-size: 32px;">3.9</text>') %>% html_text()
library(rvest, dplyr)
rating <- html_code %>% html_node('<text x="80" y="87.27272727272727" text-anchor="middle" style="text-anchor: middle; fill: rgb(83, 178, 119); stroke: none; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; line-height: normal; fill-opacity: 1; font-size: 32px;">3.9</text>') %>% html_text()
library(shiny); runApp('shiny_app.R')
rating <- html_code %>% html_node('text') %>% html_text()
html_code <- read_html(url)
rating <- html_code %>% html_node('text') %>% html_text()
rating
rating <- html_code %>% html_node('div#text') %>% html_text()
rating
rating %>%
html_nodes("div") %>%
html_text()
ourses <- rbind(c("CS 1110", 4.9, 2.8),
c("CS 1112", 4.0, 3.3),
c("CS 1133", 2.0, 1.0),
c("CS 1142", 4.0, 3.3),
c("CS 1300", 4.2, 2.2),
c("CS 1620", 3.0, 2.0),
c("CS 1710", 2.2, 3.0),
c("CS 1998", 3.0, 3.0),
c("CS 2024", 4.0, 3.0),
c("CS 2110", 3.9, 3.0),
c("CS 2112", 4.4, 4.4),
c("CS 2300", 3.5, 3.3),
c("CS 2800", 2.3, 3.9),
c("CS 2850", 3.9, 2.1),
c("CS 3110", 3.6, 4.4),
c("CS 3152", 5.0, 4.0),
c("CS 3300", 3.8, 3.3),
c("CS 3410", 3.4, 4.3),
c("CS 3420", 3.3, 2.7),
c("CS 4120", 5.0, 5.0),
c("CS 4220", 4.0, 5.0),
c("CS 4320", 3.4, 3.2),
c("CS 4321", 3.0, 4.0),
c("CS 4410", 1.3, 4.3),
c("CS 4670", 5.0, 3.0),
c("CS 4700", 1.5, 2.8),
c("CS 4740", 2.3, 3.0),
c("CS 4744", 2.0, 5.0),
c("CS 4754", 1.5, 2.8),
c("CS 4775", 5.0, 3.0),
c("CS 4780", 5.0, 3.0),
c("CS 4786", 1.7, 2.7),
c("CS 4820", 4.7, 4.5),
c("CS 4860", 4.0, 4.0),
c("CS 5120",5.0, 5.0),
c("CS 5320",3.4, 3.2))
courses
courses <- rbind(c("CS 1110", 4.9, 2.8),
c("CS 1112", 4.0, 3.3),
c("CS 1133", 2.0, 1.0),
c("CS 1142", 4.0, 3.3),
c("CS 1300", 4.2, 2.2),
c("CS 1620", 3.0, 2.0),
c("CS 1710", 2.2, 3.0),
c("CS 1998", 3.0, 3.0),
c("CS 2024", 4.0, 3.0),
c("CS 2110", 3.9, 3.0),
c("CS 2112", 4.4, 4.4),
c("CS 2300", 3.5, 3.3),
c("CS 2800", 2.3, 3.9),
c("CS 2850", 3.9, 2.1),
c("CS 3110", 3.6, 4.4),
c("CS 3152", 5.0, 4.0),
c("CS 3300", 3.8, 3.3),
c("CS 3410", 3.4, 4.3),
c("CS 3420", 3.3, 2.7),
c("CS 4120", 5.0, 5.0),
c("CS 4220", 4.0, 5.0),
c("CS 4320", 3.4, 3.2),
c("CS 4321", 3.0, 4.0),
c("CS 4410", 1.3, 4.3),
c("CS 4670", 5.0, 3.0),
c("CS 4700", 1.5, 2.8),
c("CS 4740", 2.3, 3.0),
c("CS 4744", 2.0, 5.0),
c("CS 4754", 1.5, 2.8),
c("CS 4775", 5.0, 3.0),
c("CS 4780", 5.0, 3.0),
c("CS 4786", 1.7, 2.7),
c("CS 4820", 4.7, 4.5),
c("CS 4860", 4.0, 4.0),
c("CS 5120",5.0, 5.0),
c("CS 5320",3.4, 3.2))
head(courses)
courses <- data.frame(courses)
courses
names(courses) <- c("course_title_codes", "Quality Rating", "Difficulty Rating")
courses
class(courses$course_title_codes)
courses$course_title_codes <- as.character(courses$course_title_codes)
courses
library(rvest, dplyr)
url <- "http://www.cureviews.org/course/CS/4780"
html_code <- read_html(url)
rating <- html_code %>% html_node('<text x="80" y="87.27272727272727" text-anchor="middle" style="text-anchor: middle; fill: rgb(83, 178, 119); stroke: none; font-style: normal; font-variant: normal; font-weight: normal; font-stretch: normal; line-height: normal; fill-opacity: 1; font-size: 32px;">3.9</text>') %>% html_text()
rating <- html_code %>% html_node('div#text') %>% html_text()
rating %>%
html_nodes("div") %>%
html_text()
#should change the title to hardcoding cureviews
courses <- rbind(c("CS 1110", 4.9, 2.8),
c("CS 1112", 4.0, 3.3),
c("CS 1133", 2.0, 1.0),
c("CS 1142", 4.0, 3.3),
c("CS 1300", 4.2, 2.2),
c("CS 1620", 3.0, 2.0),
c("CS 1710", 2.2, 3.0),
c("CS 1998", 3.0, 3.0),
c("CS 2024", 4.0, 3.0),
c("CS 2110", 3.9, 3.0),
c("CS 2112", 4.4, 4.4),
c("CS 2300", 3.5, 3.3),
c("CS 2800", 2.3, 3.9),
c("CS 2850", 3.9, 2.1),
c("CS 3110", 3.6, 4.4),
c("CS 3152", 5.0, 4.0),
c("CS 3300", 3.8, 3.3),
c("CS 3410", 3.4, 4.3),
c("CS 3420", 3.3, 2.7),
c("CS 4120", 5.0, 5.0),
c("CS 4220", 4.0, 5.0),
c("CS 4320", 3.4, 3.2),
c("CS 4321", 3.0, 4.0),
c("CS 4410", 1.3, 4.3),
c("CS 4670", 5.0, 3.0),
c("CS 4700", 1.5, 2.8),
c("CS 4740", 2.3, 3.0),
c("CS 4744", 2.0, 5.0),
c("CS 4754", 1.5, 2.8),
c("CS 4775", 5.0, 3.0),
c("CS 4780", 5.0, 3.0),
c("CS 4786", 1.7, 2.7),
c("CS 4820", 4.7, 4.5),
c("CS 4860", 4.0, 4.0),
c("CS 5120",5.0, 5.0),
c("CS 5320",3.4, 3.2))
courses <- data.frame(courses)
names(courses) <- c("course_title_codes", "quality rating", "difficulty rating")
courses$course_title_codes <- as.character(courses$course_title_codes)
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
node_metadata <- readRDS("node_metadata.Rda")
node_metadata
library(rvest)
library(shiny); runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
runApp('shiny_app.R')
