recommended_courses[[i]] <- data.frame("Reccomended Courses" = str)
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses)
}
# Recommender function based on courses_taken
course_recs_vis <- function(courses_taken, data, courses, nn) {
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
data <- data %>% select(course_title_codes, course_titles, course_descriptions)
data <- data %>% unique()
# Clean the data
courses = data %>%
group_by(course_descriptions) %>%
select(course_descriptions) %>%
unique() %>%
as.matrix()
data$course_descriptions <- as.character(data$course_descriptions)
courses_taken_descriptions <- c()
for(course in courses_taken){
course_description <- as.character(data[which(course == data$course_title_codes),]$course_descriptions)
courses_taken_descriptions <- c(courses_taken_descriptions,course_description )
}
recommended_courses_dist <- list()
if (length(courses_taken_descriptions) != 0) {
for (i in 1:length(courses_taken_descriptions)) {
for (j in 1:nrow(courses)) {
if (courses_taken_descriptions[i] == courses[j]) {
sim <- 1 - nn$dist[j,]
course_descriptions_rec <- courses[nn$id[j,]]
course_codes_rec<- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
return (course_code)
}))
text <- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
course_title <- (data[which(x == data$course_descriptions),]$course_titles)[1]
return (paste(course_code, "|", course_title))
}))
data_sim <- data.frame("Course Title Code" = course_codes_rec, "Cosine Distance" = as.numeric(sim), "Text" = text, stringsAsFactors = FALSE)
p <- plot_ly(data_sim, x = ~Course.Title.Code, y = ~Cosine.Distance, type = 'bar', text = ~Text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = paste("Cosine Distances between Reccomended Courses and",courses_taken[i]),
xaxis = list(title = "Recommended Courses"),
yaxis = list(title = "Cosine Distances"))
recommended_courses_dist[[i]] <- p
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses_dist)
}
course_recs(courses_taken, data, courses, nn)
v <- course_recs_vis(courses_taken, data, courses, nn)
v[[1]]
runApp()
runApp()
runApp()
runApp()
library(recommenderlab)
library(dplyr)
library(tidyr)
library(proxy)
library(dbscan)
library(quanteda)
library(plotly)
n_threads <- max(1L, floor(RcppParallel::defaultNumThreads() - 1))
quanteda_options(threads = n_threads)
library(SnowballC)
library(tidytext)
library(textclean)
#' Content-based filtering calculates item similarities based on course titles.
#' It breaks down terms in titles to calulate term-frequency. Measures the cosine
#' similarity and outputs the k-th nearest neighbors.
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
data <- data %>% select(course_title_codes, course_titles, course_descriptions)
data <- data %>% unique()
saveRDS("clean_data_rec.RDS")
# Clean the data
courses = data %>%
group_by(course_descriptions) %>%
select(course_descriptions) %>%
unique() %>%
as.matrix()
saveRDS("clean_courses_rec.RDS")
# Preprocess the data
ccourses <- courses %>%
as_tibble() %>%
mutate(id = 1:n()) %>%
unnest_tokens(word, course_descriptions) %>%
filter(!(word %in% stopwords("english"))) %>%
mutate(word = replace_number(word, remove = T)) %>%
mutate(word =  gsub("[[:punct:]]", " ", word)) %>%
mutate(word = wordStem(word)) %>%
mutate(word = replace_white(word)) %>%
filter(word != "") %>%
count(id, word)
course_dfm <- ccourses %>% cast_dfm(id, word, n)
# Calculate term frequency-inverse document frequency scores
course_dfm <- course_dfm %>% dfm_tfidf()
# Measure the cosine similarity
cos_dist <- course_dfm %>% textstat_simil(method = "cosine")
cos_dist <- 1 - cos_dist
# k-nearest neighbors
nn <- kNN(cos_dist, 5)
saveRDS(nn, file = "nearest_neighbor.RDS")
library(recommenderlab)
library(dplyr)
library(tidyr)
library(proxy)
library(dbscan)
library(quanteda)
library(plotly)
n_threads <- max(1L, floor(RcppParallel::defaultNumThreads() - 1))
quanteda_options(threads = n_threads)
library(SnowballC)
library(tidytext)
library(textclean)
data <- readRDS(file = "clean_data_rec.RDS")
courses <- readRDS(file = "clean_courses_rec.RDS")
nn <- readRDS( "nearest_neighbor.RDS")
# Recommender function based on courses_taken
course_recs <- function(courses_taken, data, courses, nn) {
data$course_descriptions <- as.character(data$course_descriptions)
courses_taken_descriptions <- c()
for(course in courses_taken){
course_description <- as.character(data[which(course == data$course_title_codes),]$course_descriptions)
courses_taken_descriptions <- c(courses_taken_descriptions,course_description )
}
recommended_courses <- list()
if (length(courses_taken_descriptions) != 0) {
for (i in 1:length(courses_taken_descriptions)) {
for (j in 1:nrow(courses)) {
if (courses_taken_descriptions[i] == courses[j]) {
course_descriptions_rec <- courses[nn$id[j,]]
str <- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
course_title <- (data[which(x == data$course_descriptions),]$course_titles)[1]
return (paste(course_code, "|", course_title))
}))
recommended_courses[[i]] <- data.frame("Reccomended Courses" = str)
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses)
}
# Recommender function based on courses_taken
course_recs_vis <- function(courses_taken, data, courses, nn) {
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
data <- data %>% select(course_title_codes, course_titles, course_descriptions)
data <- data %>% unique()
# Clean the data
courses = data %>%
group_by(course_descriptions) %>%
select(course_descriptions) %>%
unique() %>%
as.matrix()
data$course_descriptions <- as.character(data$course_descriptions)
courses_taken_descriptions <- c()
for(course in courses_taken){
course_description <- as.character(data[which(course == data$course_title_codes),]$course_descriptions)
courses_taken_descriptions <- c(courses_taken_descriptions,course_description )
}
recommended_courses_dist <- list()
if (length(courses_taken_descriptions) != 0) {
for (i in 1:length(courses_taken_descriptions)) {
for (j in 1:nrow(courses)) {
if (courses_taken_descriptions[i] == courses[j]) {
sim <- 1 - nn$dist[j,]
course_descriptions_rec <- courses[nn$id[j,]]
course_codes_rec<- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
return (course_code)
}))
text <- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
course_title <- (data[which(x == data$course_descriptions),]$course_titles)[1]
return (paste(course_code, "|", course_title))
}))
data_sim <- data.frame("Course Title Code" = course_codes_rec, "Cosine Distance" = as.numeric(sim), "Text" = text, stringsAsFactors = FALSE)
p <- plot_ly(data_sim, x = ~Course.Title.Code, y = ~Cosine.Distance, type = 'bar', text = ~Text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = paste("Cosine Distances between Reccomended Courses and",courses_taken[i]),
xaxis = list(title = "Recommended Courses"),
yaxis = list(title = "Cosine Distances"))
recommended_courses_dist[[i]] <- p
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses_dist)
}
data
library(recommenderlab)
library(dplyr)
library(tidyr)
library(proxy)
library(dbscan)
library(quanteda)
library(plotly)
n_threads <- max(1L, floor(RcppParallel::defaultNumThreads() - 1))
quanteda_options(threads = n_threads)
library(SnowballC)
library(tidytext)
library(textclean)
#' Content-based filtering calculates item similarities based on course titles.
#' It breaks down terms in titles to calulate term-frequency. Measures the cosine
#' similarity and outputs the k-th nearest neighbors.
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
data <- data %>% select(course_title_codes, course_titles, course_descriptions)
data <- data %>% unique()
saveRDS("clean_data_rec.RDS")
# Clean the data
courses = data %>%
group_by(course_descriptions) %>%
select(course_descriptions) %>%
unique() %>%
as.matrix()
saveRDS("clean_courses_rec.RDS")
# Preprocess the data
ccourses <- courses %>%
as_tibble() %>%
mutate(id = 1:n()) %>%
unnest_tokens(word, course_descriptions) %>%
filter(!(word %in% stopwords("english"))) %>%
mutate(word = replace_number(word, remove = T)) %>%
mutate(word =  gsub("[[:punct:]]", " ", word)) %>%
mutate(word = wordStem(word)) %>%
mutate(word = replace_white(word)) %>%
filter(word != "") %>%
count(id, word)
course_dfm <- ccourses %>% cast_dfm(id, word, n)
# Calculate term frequency-inverse document frequency scores
course_dfm <- course_dfm %>% dfm_tfidf()
# Measure the cosine similarity
cos_dist <- course_dfm %>% textstat_simil(method = "cosine")
cos_dist <- 1 - cos_dist
# k-nearest neighbors
nn <- kNN(cos_dist, 5)
saveRDS(nn, file = "nearest_neighbor.RDS")
library(recommenderlab)
library(dplyr)
library(tidyr)
library(proxy)
library(dbscan)
library(quanteda)
library(plotly)
n_threads <- max(1L, floor(RcppParallel::defaultNumThreads() - 1))
quanteda_options(threads = n_threads)
library(SnowballC)
library(tidytext)
library(textclean)
data <- readRDS(file = "clean_data_rec.RDS")
courses <- readRDS(file = "clean_courses_rec.RDS")
nn <- readRDS("nearest_neighbor.RDS")
# Recommender function based on courses_taken
course_recs <- function(courses_taken, data, courses, nn) {
data$course_descriptions <- as.character(data$course_descriptions)
courses_taken_descriptions <- c()
for(course in courses_taken){
course_description <- as.character(data[which(course == data$course_title_codes),]$course_descriptions)
courses_taken_descriptions <- c(courses_taken_descriptions,course_description )
}
recommended_courses <- list()
if (length(courses_taken_descriptions) != 0) {
for (i in 1:length(courses_taken_descriptions)) {
for (j in 1:nrow(courses)) {
if (courses_taken_descriptions[i] == courses[j]) {
course_descriptions_rec <- courses[nn$id[j,]]
str <- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
course_title <- (data[which(x == data$course_descriptions),]$course_titles)[1]
return (paste(course_code, "|", course_title))
}))
recommended_courses[[i]] <- data.frame("Reccomended Courses" = str)
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses)
}
# Recommender function based on courses_taken
course_recs_vis <- function(courses_taken, data, courses, nn) {
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
data <- data %>% select(course_title_codes, course_titles, course_descriptions)
data <- data %>% unique()
# Clean the data
courses = data %>%
group_by(course_descriptions) %>%
select(course_descriptions) %>%
unique() %>%
as.matrix()
data$course_descriptions <- as.character(data$course_descriptions)
courses_taken_descriptions <- c()
for(course in courses_taken){
course_description <- as.character(data[which(course == data$course_title_codes),]$course_descriptions)
courses_taken_descriptions <- c(courses_taken_descriptions,course_description )
}
recommended_courses_dist <- list()
if (length(courses_taken_descriptions) != 0) {
for (i in 1:length(courses_taken_descriptions)) {
for (j in 1:nrow(courses)) {
if (courses_taken_descriptions[i] == courses[j]) {
sim <- 1 - nn$dist[j,]
course_descriptions_rec <- courses[nn$id[j,]]
course_codes_rec<- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
return (course_code)
}))
text <- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
course_title <- (data[which(x == data$course_descriptions),]$course_titles)[1]
return (paste(course_code, "|", course_title))
}))
data_sim <- data.frame("Course Title Code" = course_codes_rec, "Cosine Distance" = as.numeric(sim), "Text" = text, stringsAsFactors = FALSE)
p <- plot_ly(data_sim, x = ~Course.Title.Code, y = ~Cosine.Distance, type = 'bar', text = ~Text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = paste("Cosine Distances between Reccomended Courses and",courses_taken[i]),
xaxis = list(title = "Recommended Courses"),
yaxis = list(title = "Cosine Distances"))
recommended_courses_dist[[i]] <- p
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses_dist)
}
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
unique_locs <- readRDS(file = "unique_locs.Rda")
geocode_locs<- readRDS(file = "geocode_locs.Rda")
node_metadata <- readRDS(file = "node_metadata.Rda")
edge_metadata <- readRDS(file = "edge_metadata.Rda")
data_recs <- readRDS(file = "clean_data_rec.RDS")
courses_recs <- readRDS(file = "clean_courses_rec.RDS")
nn <- readRDS( "nearest_neighbor.RDS")
data_recs <- readRDS(file = "clean_data_rec.RDS")
library(recommenderlab)
library(dplyr)
library(tidyr)
library(proxy)
library(dbscan)
library(quanteda)
library(plotly)
n_threads <- max(1L, floor(RcppParallel::defaultNumThreads() - 1))
quanteda_options(threads = n_threads)
library(SnowballC)
library(tidytext)
library(textclean)
data <- readRDS(file = "clean_data_rec.RDS")
courses <- readRDS(file = "clean_courses_rec.RDS")
nn <- readRDS("nearest_neighbor.RDS")
# Recommender function based on courses_taken
course_recs <- function(courses_taken, data, courses, nn) {
data$course_descriptions <- as.character(data$course_descriptions)
courses_taken_descriptions <- c()
for(course in courses_taken){
course_description <- as.character(data[which(course == data$course_title_codes),]$course_descriptions)
courses_taken_descriptions <- c(courses_taken_descriptions,course_description )
}
recommended_courses <- list()
if (length(courses_taken_descriptions) != 0) {
for (i in 1:length(courses_taken_descriptions)) {
for (j in 1:nrow(courses)) {
if (courses_taken_descriptions[i] == courses[j]) {
course_descriptions_rec <- courses[nn$id[j,]]
str <- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
course_title <- (data[which(x == data$course_descriptions),]$course_titles)[1]
return (paste(course_code, "|", course_title))
}))
recommended_courses[[i]] <- data.frame("Reccomended Courses" = str)
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses)
}
# Recommender function based on courses_taken
course_recs_vis <- function(courses_taken, data, courses, nn) {
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
data <- data %>% select(course_title_codes, course_titles, course_descriptions)
data <- data %>% unique()
# Clean the data
courses = data %>%
group_by(course_descriptions) %>%
select(course_descriptions) %>%
unique() %>%
as.matrix()
data$course_descriptions <- as.character(data$course_descriptions)
courses_taken_descriptions <- c()
for(course in courses_taken){
course_description <- as.character(data[which(course == data$course_title_codes),]$course_descriptions)
courses_taken_descriptions <- c(courses_taken_descriptions,course_description )
}
recommended_courses_dist <- list()
if (length(courses_taken_descriptions) != 0) {
for (i in 1:length(courses_taken_descriptions)) {
for (j in 1:nrow(courses)) {
if (courses_taken_descriptions[i] == courses[j]) {
sim <- 1 - nn$dist[j,]
course_descriptions_rec <- courses[nn$id[j,]]
course_codes_rec<- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
return (course_code)
}))
text <- as.character(sapply(course_descriptions_rec, function(x){
course_code <- (data[which(x == data$course_descriptions),]$course_title_code)[1]
course_title <- (data[which(x == data$course_descriptions),]$course_titles)[1]
return (paste(course_code, "|", course_title))
}))
data_sim <- data.frame("Course Title Code" = course_codes_rec, "Cosine Distance" = as.numeric(sim), "Text" = text, stringsAsFactors = FALSE)
p <- plot_ly(data_sim, x = ~Course.Title.Code, y = ~Cosine.Distance, type = 'bar', text = ~Text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = paste("Cosine Distances between Reccomended Courses and",courses_taken[i]),
xaxis = list(title = "Recommended Courses"),
yaxis = list(title = "Cosine Distances"))
recommended_courses_dist[[i]] <- p
break
}
}
}
} else {
return("The user has not taken any courses!")
}
return(recommended_courses_dist)
}
library(recommenderlab)
library(dplyr)
library(tidyr)
library(proxy)
library(dbscan)
library(quanteda)
library(plotly)
n_threads <- max(1L, floor(RcppParallel::defaultNumThreads() - 1))
quanteda_options(threads = n_threads)
library(SnowballC)
library(tidytext)
library(textclean)
#' Content-based filtering calculates item similarities based on course titles.
#' It breaks down terms in titles to calulate term-frequency. Measures the cosine
#' similarity and outputs the k-th nearest neighbors.
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
data <- data %>% select(course_title_codes, course_titles, course_descriptions)
data <- data %>% unique()
saveRDS("clean_data_rec.RDS")
# Clean the data
courses = data %>%
group_by(course_descriptions) %>%
select(course_descriptions) %>%
unique() %>%
as.matrix()
saveRDS("clean_courses_rec.RDS")
# Preprocess the data
ccourses <- courses %>%
as_tibble() %>%
mutate(id = 1:n()) %>%
unnest_tokens(word, course_descriptions) %>%
filter(!(word %in% stopwords("english"))) %>%
mutate(word = replace_number(word, remove = T)) %>%
mutate(word =  gsub("[[:punct:]]", " ", word)) %>%
mutate(word = wordStem(word)) %>%
mutate(word = replace_white(word)) %>%
filter(word != "") %>%
count(id, word)
course_dfm <- ccourses %>% cast_dfm(id, word, n)
# Calculate term frequency-inverse document frequency scores
course_dfm <- course_dfm %>% dfm_tfidf()
# Measure the cosine similarity
cos_dist <- course_dfm %>% textstat_simil(method = "cosine")
cos_dist <- 1 - cos_dist
# k-nearest neighbors
nn <- kNN(cos_dist, 5)
saveRDS(nn, file = "nearest_neighbor.RDS")
data <- readRDS(file = "Preprocesses_course_time_data.Rda")
unique_locs <- readRDS(file = "unique_locs.Rda")
geocode_locs<- readRDS(file = "geocode_locs.Rda")
node_metadata <- readRDS(file = "node_metadata.Rda")
edge_metadata <- readRDS(file = "edge_metadata.Rda")
data_recs <- readRDS(file = "clean_data_rec.RDS")
courses_recs <- readRDS(file = "clean_courses_rec.RDS")
nn <- readRDS( "nearest_neighbor.RDS")
